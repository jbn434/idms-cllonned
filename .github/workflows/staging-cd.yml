name: Build and Deploy License  API [STAGING]

on:
  push:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Initialize Terraform
        run: |
          cd infra/vpc
          terraform init -backend-config="bucket=my-terraform-state-bckt43"

      - name: Terraform Plan
        run: |
          cd infra/vpc
          terraform plan -var-file=stage.tfvars
        env:
          TF_VAR_ami_id: ${{ secrets.AMI_ID }}

      - name: Terraform Apply
        run: |
          cd infra/vpc
          terraform apply -auto-approve -var-file=stage.tfvars
        env:
          TF_VAR_ami_id: ${{ secrets.AMI_ID }}

      - name: Extract EC2 Public IP from Terraform Output
        id: extract_ip
        run: |
          cd infra/vpc
          RAW_OUTPUT=$(terraform output -raw ec2_public_ip 2>&1 || true)
          IP=$(echo "$RAW_OUTPUT" | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n 1)
          echo "Raw Terraform Output: $IP"
          if [[ -z "$IP" ]]; then
            echo "❌ Could not extract valid EC2 IP from Terraform output:"
            echo "$RAW_OUTPUT"
            exit 1
          fi
          echo "✅ EC2 Public IP found: $IP"
          echo "EC2_IP=$IP" >> $GITHUB_ENV

      - name: Install AWS CLI & Fetch Environment Variables
        run: |
          if ! command -v aws &> /dev/null; then
            echo "Installing AWS CLI..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi

          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_REGION

          mkdir -p docker
          aws ssm get-parameter \
            --name drivers-license-api-staging-env \
            --with-decryption \
            --output text \
            --query Parameter.Value \
            --region $AWS_REGION > docker/.env
          echo ".env file downloaded with $(wc -l < docker/.env) lines"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Save Docker Image
        run: |
          docker build -t api -f docker/Dockerfile .
          docker save api | gzip > docker/api.tar.gz

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy to EC2 via SSH
        run: |
          echo "Deploying to EC2 at $EC2_IP"
          rsync -avz --progress -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" docker/.env ubuntu@$EC2_IP:/home/ubuntu/docker/
          rsync -avz --progress -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" docker/docker-compose.yml ubuntu@$EC2_IP:/home/ubuntu/docker/
          rsync -avz --progress -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" docker/api.tar.gz ubuntu@$EC2_IP:/home/ubuntu/docker/

          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$EC2_IP bash -c "'
            cd /home/ubuntu/docker/
            if ! command -v docker &> /dev/null; then
              echo \"Docker not found, installing...\"
              sudo apt update && sudo apt install -y docker.io docker-compose
              sudo usermod -aG docker ubuntu
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            echo \"Loading and running Docker containers...\"
            docker load < api.tar.gz
            docker-compose down
            docker-compose up -d --build
          '"
